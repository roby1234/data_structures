#include "bst.h"
#include <iostream>
#include <string>
#include <cmath>
#include <cstdlib>
#include <string.h>

using namespace std;

node::node(){
	leftchild = NULL;
	rightchild = NULL;
	parent = NULL;
	key = 0;
}

node::~node(){}

node* node::get_left(){
	return leftchild;
}

node* node::get_right(){
	return rightchild;
}

node* node::get_parent(){
	return parent;
}

int node::get_key(){
	return key;
}

void node::set_left(node* l){
	leftchild = l;
}

void node::set_right(node* r){
	rightchild = r;
}

void node::set_parent(node* p){
	parent = p;
}

void node::set_key(int k){
	key = k;
}



bst::bst(){
	root = NULL;
}

bst::~bst(){
	clear_tree(root);
}

void bst::clear_tree(node* a){
	if (a != NULL){
		clear_tree(a->get_left());
		clear_tree(a->get_right());
		delete a;
	}
}

void bst::insert_node(node* new_node){
	if (root == NULL){						//if there is no node in the tree 			
		root = new node;							//add the first node with key k  
		root->set_key(new_node->get_key());			//initialise all its pointers to null
		root->set_left(NULL);						
		root->set_right(NULL);
		root->set_parent(NULL); 
		cout << "Tree was empty firstly , now the node is inserted at the root position\n"; 
		return;
	}
	node* temproot = root;
	while (temproot != NULL){
		if (new_node->get_key() == temproot->get_key()){			//if given key is already present in the tree
			cout << "This key has already been inserted before. Try again later\n";	
			return;
		}
		else if (new_node->get_key() < temproot->get_key()){		//if given key is less than the the root
			if (temproot->get_left() != NULL){
				temproot = temproot->get_left();
			}
			else{
				temproot->set_left(new_node);
				new_node->set_left(NULL);
				new_node->set_right(NULL);
				new_node->set_parent(temproot);
				cout << "The node is inserted to the left\n";
				return;
			}
		}
		else if (new_node->get_key() > temproot->get_key()){		//if given key is less than the the root
			if (temproot->get_right() != NULL){
				temproot = temproot->get_right();
			}
			else{
				temproot->set_right(new_node);
				new_node->set_left(NULL);
				new_node->set_right(NULL);
				new_node->set_parent(temproot);
				cout << "The node is inserted to the right\n";
				return;
			}
		}	
	}	
}
	
int bst::search_node(int k , node* root){
	if (root != NULL){
		if (k == root->get_key()){
			cout << "Found\n";
			return 1 ;
		}
		else if (k < root->get_key()){
			search_node(k , root->get_left());
		}
		else{
			search_node(k , root->get_right());
		}
	}
	else{
		cout << "Key not found. U r searching for the key , that does not exist.\n";
		return -1;
	}
}

node* bst::find_node(int k , node* root){
	if (root != NULL){
		if (k == root->get_key()){
			cout << "Found\n";
			cout << "Key 	: " << root->get_key();
			cout << "	Parent : " << ((root->get_parent())->get_key());
			return root;
		}
		else if (k < root->get_key()){
			find_node(k , root->get_left());
		}
		else{
			find_node(k , root->get_right());
		}
	}
	else{
		cout << "Key not found. U r searching for the key , that does not exist.\n";
		return NULL;
	}
}

void bst::delete_node(int k , node* root){
	if(root == NULL){
		cout << "Nothing to delete.\n";
		return;
	}
	else{
		node* temp = find_node(k , root);
		if (temp == NULL){
			cout << "Nothing to delete. Key is not present in the tree\n";
		}
		else if (temp->get_left() == NULL && temp->get_right() == NULL){
			if (temp = ((temp->get_parent())->get_left())){
				(temp->get_parent())->set_left(NULL);
			}
			else {
				(temp->get_parent())->set_right(NULL);
			}
		}
		else if (temp->get_left() != NULL && temp->get_right() == NULL){
			if (temp = ((temp->get_parent())->get_left())){
				(temp->get_parent())->set_left(temp->get_left());
			}
			else {
				(temp->get_parent())->set_right(temp->get_left());
			}
		}
		else if (temp->get_left() == NULL && temp->get_right() != NULL){
			if (temp = ((temp->get_parent())->get_left())){
				(temp->get_parent())->set_left(temp->get_right());
			}
			else {
				(temp->get_parent())->set_right(temp->get_right());
			}
		}
		else if (temp->get_left() != NULL && temp->get_right() != NULL){
			int sccsr = successor(temp);
			delete_node(sccsr , temp); 
			temp->set_key(sccsr);
		}
		delete temp ;
	}
	return ;
}

void bst::preorder(node* a){
	if (root == NULL){
		cout << "Tree is empty.\n";
		return;
	}
	if (a != NULL){
		cout << a->get_key() << "\t";
		preorder(a->get_left());
		preorder(a->get_right());
	}
}

void bst::inorder(node* a){
	if (root == NULL){
		cout << "Tree is empty.\n";
		return;
	}
	if (a != NULL){
		inorder(a->get_left());
		cout << a->get_key() << "\t";
		inorder(a->get_right());
	}
}

void bst::postorder(node* a){
	if (root == NULL){
		cout << "Tree is empty.\n";
		return;
	}
	if (a != NULL){
		postorder(a->get_left());
		postorder(a->get_right());
		cout << a->get_key() << "\t";
	}
}

int bst::successor(node* a){
	if (root == NULL){
		cout << "Tree is empty.\n";
		return -1;
	}
	if (a->get_right() != NULL){
		return (min_of_tree(a->get_right()));		
	}
	else{
		node* y = a->get_parent();
		while(a != y->get_left() && y->get_parent() != NULL){
			a = y ;
			y = a->get_parent();
		}
		return y->get_key();
	}
}

int bst::max_of_tree(node* a){
	if (root == NULL){
		cout << "Tree is empty.\n";
		return -1;
	}
	node* temp = a->get_parent();
	while (a != NULL){
		temp = a;
		a = a->get_right();
	}
	cout << "Maximum key in the tree is : " << temp->get_key() << endl;
	return 0;
}

int bst::min_of_tree(node* a){
	if (root == NULL){
		cout << "Tree is empty.\n";
		return -1;
	}
	node* temp = a->get_parent();
	while (a != NULL){
		temp = a;
		a = a->get_left();
	}
	cout << "Minimum key in the tree is : " << temp->get_key() << endl;
	return 0;
}
//int main(){return 0;}
